use napi_derive::napi;

/// Search options exposed to Node.js.
/// All fields are optional when provided from JavaScript/TypeScript; if omitted,
/// defaults will be filled in from [`Default`].
///
/// # TypeScript definition (generated by `napi`):
/// ```ts
/// interface SearchOptions {
///   limit?: number;        // default: 10
///   threshold?: number;    // default: 0.0
///   normalize?: boolean;   // default: true
///   ignoreCase?: boolean;  // default: true
/// }
/// ```
#[napi(object)]
#[derive(Clone)]
pub struct SearchOptions {
    /// Maximum number of results to return.
    /// Defaults to `10` if not specified.
    pub limit: Option<u32>,

    /// Minimum score required for a result to be included.
    /// Defaults to `0.0`.
    pub threshold: Option<f64>,

    /// Whether to normalize/clean inputs (e.g. remove diacritics, collapse whitespace).
    /// Defaults to `true`.
    pub normalize: Option<bool>,

    /// Whether to compare case-insensitively.
    /// Defaults to `true`.
    pub ignore_case: Option<bool>,
}

impl Default for SearchOptions {
    fn default() -> Self {
        Self {
            limit: Some(10),
            threshold: Some(0.0),
            normalize: true.into(),
            ignore_case: true.into(),
        }
    }
}
