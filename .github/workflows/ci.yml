name: CI

env:
  DEBUG: "napi:*"
  APP_NAME: "fast-fuzzy-rs"
  MACOSX_DEPLOYMENT_TARGET: "10.13"

on:
  push:
    branches:
      - master
    tags-ignore:
      - "**"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  lint:
    name: Lint SourceCode
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install dependencies
        run: npm ci

      - name: Cargo fmt
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: "aarch64-apple-darwin"
            build: |
              export MACOSX_DEPLOYMENT_TARGET='11.0'
              npm run build -- --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: >-
              set -e &&
              npm run build -- --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-musl"
            build: npm run build -- --target x86_64-unknown-linux-musl

    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.11.0

      - name: Install dependencies
        run: npm ci

      - name: "Build"
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: --user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node

  build-armv7-linux-gnueabihf:
    name: Build armv7-unknown-linux-gnueabihf
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "armv7-unknown-linux-gnueabihf"

      - name: Setup cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
          npm run build -- --target armv7-unknown-linux-gnueabihf

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: ${{ env.APP_NAME }}.*.node

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
          - host: macos-latest
            target: "aarch64-apple-darwin"
        node: ["18", "20"]
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        if: startsWith(matrix.settings.target, 'x86_64')
        with:
          node-version: ${{ matrix.node }}
          architecture: "x64"

      - name: Setup node
        uses: actions/setup-node@v4
        if: startsWith(matrix.settings.target, 'aarch64')
        with:
          node-version: ${{ matrix.node }}
          architecture: "arm64"

      - name: Install dependencies
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: Generate bindings
        run: npm run generate-bindings

      - name: Test bindings
        run: npm test

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["18", "20"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .

      - name: Generate bindings
        run: npm run generate-bindings

      - name: Test bindings
        run: npm test

  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node: ["18", "20"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: .

      - name: Generate bindings
        run: npm run generate-bindings

      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine npm test

  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build-armv7-linux-gnueabihf
    strategy:
      fail-fast: false
      matrix:
        node: ["18", "20"]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .

      - name: Install dependencies
        run: npm ci

      - name: Generate bindings
        run: npm run generate-bindings

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bookworm-slim
          options: "--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build"
          run: |
            set -e && \
            npm test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - test-linux-x64-gnu-binding
      - test-macOS-windows-binding

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
